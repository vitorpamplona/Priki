/* Generated By:JavaCC: Do not edit this line. HtmlTokenParserTokenManager.java */
/*
 * Priki - Prevalent Wiki
 * Copyright (c) 2005 Priki 
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @author Vitor Fernando Pamplona - vitor@babaxp.org
 *
 */

package org.priki.format.compiler;
import java.io.StringReader;
import org.priki.utils.WikiwordUtils;
import org.priki.bo.*;
import java.util.*;

/** Token Manager. */
public class HtmlTokenParserTokenManager implements HtmlTokenParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 4);
      case 10:
         return jjStopAtPos(0, 2);
      case 13:
         return jjStopAtPos(0, 3);
      case 32:
         return jjStopAtPos(0, 1);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0xc004ffff00000000L, 0x3fffL, 0xffffffff00000000L, 0xf9ffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x80000000800000L
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0xffffffffffff0000L, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0xffffc00000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 155;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfc00ffefffffffffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddStates(4, 13);
                  }
                  else if (curChar == 60)
                     jjAddStates(14, 16);
                  else if (curChar == 38)
                     jjCheckNAdd(24);
                  if (curChar == 60)
                     jjCheckNAddStates(17, 21);
                  break;
               case 1:
                  if (curChar == 61)
                     jjAddStates(22, 23);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(24, 28);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 1);
                  break;
               case 6:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 62 && kind > 11)
                     kind = 11;
                  break;
               case 9:
                  if (curChar == 32)
                     jjCheckNAddStates(29, 35);
                  break;
               case 10:
                  if (curChar == 32)
                     jjCheckNAddStates(36, 39);
                  break;
               case 11:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 39)
                     jjCheckNAddStates(24, 28);
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(40, 45);
                  break;
               case 15:
                  if (curChar == 32)
                     jjCheckNAddStates(46, 53);
                  break;
               case 16:
                  if (curChar == 32)
                     jjCheckNAddStates(54, 63);
                  break;
               case 17:
                  if (curChar == 47)
                     jjCheckNAddStates(64, 69);
                  break;
               case 18:
                  if ((0xfc00ffefffffffffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 20:
                  if ((0xaffffefeffffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((0x3ff001000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 23:
                  if (curChar == 38)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 59 && kind > 19)
                     kind = 19;
                  break;
               case 28:
                  if (curChar == 47)
                     jjCheckNAdd(20);
                  break;
               case 29:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 42:
                  if (curChar == 60)
                     jjAddStates(14, 16);
                  break;
               case 44:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 61)
                     jjAddStates(70, 71);
                  break;
               case 46:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 34)
                     jjCheckNAddStates(72, 75);
                  break;
               case 49:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 50:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 60)
                     jjCheckNAddStates(76, 78);
                  break;
               case 52:
                  if (curChar == 47)
                     jjCheckNAddStates(79, 82);
                  break;
               case 53:
                  if (curChar == 32)
                     jjCheckNAddStates(79, 82);
                  break;
               case 54:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 51);
                  break;
               case 55:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 51);
                  break;
               case 57:
                  if (curChar == 32)
                     jjAddStates(83, 84);
                  break;
               case 58:
                  if (curChar == 62 && kind > 5)
                     kind = 5;
                  break;
               case 59:
                  if (curChar == 32)
                     jjCheckNAddStates(85, 89);
                  break;
               case 60:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(60, 49);
                  break;
               case 61:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 39)
                     jjCheckNAddStates(72, 75);
                  break;
               case 64:
                  if (curChar == 32)
                     jjCheckNAddStates(90, 95);
                  break;
               case 66:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 61)
                     jjAddStates(96, 97);
                  break;
               case 68:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 69:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 34)
                     jjCheckNAddStates(98, 101);
                  break;
               case 71:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 72:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if (curChar == 60)
                     jjAddStates(102, 105);
                  break;
               case 74:
                  if (curChar == 47)
                     jjCheckNAddStates(106, 108);
                  break;
               case 75:
                  if (curChar == 32)
                     jjCheckNAddStates(106, 108);
                  break;
               case 79:
                  jjCheckNAddTwoStates(80, 73);
                  break;
               case 80:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(80, 73);
                  break;
               case 81:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 73);
                  break;
               case 82:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 73);
                  break;
               case 84:
                  if (curChar == 32)
                     jjAddStates(109, 110);
                  break;
               case 85:
                  if (curChar == 62 && kind > 6)
                     kind = 6;
                  break;
               case 87:
                  jjCheckNAddTwoStates(88, 73);
                  break;
               case 88:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(88, 73);
                  break;
               case 89:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(90, 73);
                  break;
               case 90:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(90, 73);
                  break;
               case 91:
                  if (curChar == 32)
                     jjCheckNAddStates(111, 115);
                  break;
               case 92:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(92, 71);
                  break;
               case 93:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 94:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 95:
                  if (curChar == 39)
                     jjCheckNAddStates(98, 101);
                  break;
               case 96:
                  if (curChar == 32)
                     jjCheckNAddStates(116, 121);
                  break;
               case 101:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 102:
                  if (curChar == 61)
                     jjAddStates(122, 123);
                  break;
               case 103:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 104:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 105:
                  if (curChar == 34)
                     jjCheckNAddStates(124, 127);
                  break;
               case 106:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(107, 108);
                  break;
               case 107:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(107, 108);
                  break;
               case 108:
                  if (curChar == 60)
                     jjAddStates(128, 130);
                  break;
               case 109:
                  if (curChar == 47)
                     jjCheckNAddStates(131, 133);
                  break;
               case 110:
                  if (curChar == 32)
                     jjCheckNAddStates(131, 133);
                  break;
               case 113:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(114, 108);
                  break;
               case 114:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(114, 108);
                  break;
               case 116:
                  if ((0xbffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(117, 108);
                  break;
               case 117:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(117, 108);
                  break;
               case 118:
                  if (curChar == 32)
                     jjAddStates(134, 135);
                  break;
               case 119:
                  if (curChar == 62 && kind > 7)
                     kind = 7;
                  break;
               case 120:
                  jjCheckNAddTwoStates(121, 108);
                  break;
               case 121:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(121, 108);
                  break;
               case 122:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(123, 108);
                  break;
               case 123:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(123, 108);
                  break;
               case 124:
                  if (curChar == 32)
                     jjCheckNAddStates(136, 140);
                  break;
               case 125:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(125, 106);
                  break;
               case 126:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 127:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 128:
                  if (curChar == 39)
                     jjCheckNAddStates(124, 127);
                  break;
               case 129:
                  if (curChar == 32)
                     jjCheckNAddStates(141, 146);
                  break;
               case 132:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(0, 3);
                  break;
               case 133:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 135:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjAddStates(147, 148);
                  break;
               case 136:
                  if (curChar == 46)
                     jjCheckNAdd(137);
                  break;
               case 137:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 140);
                  break;
               case 138:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(139, 138);
                  break;
               case 139:
                  if (curChar == 46)
                     jjCheckNAdd(138);
                  break;
               case 140:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(137, 138);
                  break;
               case 141:
                  if ((0x3ff889000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(141, 142);
                  break;
               case 142:
                  if ((0x600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 143:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(141, 142);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(4, 13);
                  break;
               case 145:
                  if (curChar == 46)
                     jjCheckNAdd(146);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(149, 154);
                  break;
               case 147:
                  if (curChar == 45)
                     jjCheckNAdd(146);
                  break;
               case 148:
                  if (curChar == 44)
                     jjCheckNAdd(146);
                  break;
               case 150:
                  if (curChar == 37 && kind > 16)
                     kind = 16;
                  break;
               case 151:
                  if (curChar == 58)
                     jjCheckNAdd(152);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(151, 152);
                  break;
               case 153:
                  if (curChar == 47)
                     jjCheckNAdd(154);
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(153, 154);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(155, 156);
                  else if ((0x10000000100L & l) != 0L)
                     jjAddStates(157, 158);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 3:
                  jjAddStates(159, 160);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 1);
                  break;
               case 12:
                  jjAddStates(161, 162);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(40, 45);
                  break;
               case 18:
                  if ((0xf800000178000001L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 19:
                  if (curChar == 92)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 22:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 24:
                  jjAddStates(163, 164);
                  break;
               case 26:
                  if ((0x10000000100L & l) != 0L)
                     jjAddStates(157, 158);
                  break;
               case 27:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 32:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 35:
               case 38:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 36:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(155, 156);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 40:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAddStates(165, 168);
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 47:
                  jjAddStates(169, 170);
                  break;
               case 50:
                  jjCheckNAddTwoStates(50, 51);
                  break;
               case 54:
                  if ((0xfffffffdfffffffdL & l) != 0L)
                     jjCheckNAddTwoStates(55, 51);
                  break;
               case 55:
                  jjCheckNAddTwoStates(55, 51);
                  break;
               case 56:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 62:
                  jjAddStates(171, 172);
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(173, 176);
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 69:
                  jjAddStates(177, 178);
                  break;
               case 72:
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 76:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(179, 180);
                  break;
               case 77:
                  if ((0x800000008000L & l) != 0L)
                     jjAddStates(102, 105);
                  break;
               case 78:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0xffffffdfffffffdfL & l) != 0L)
                     jjCheckNAddTwoStates(80, 73);
                  break;
               case 80:
                  jjCheckNAddTwoStates(80, 73);
                  break;
               case 81:
                  if ((0xffffffefffffffefL & l) != 0L)
                     jjCheckNAddTwoStates(82, 73);
                  break;
               case 82:
                  jjCheckNAddTwoStates(82, 73);
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(109, 110);
                  break;
               case 86:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 87:
                  if ((0xffff7fffffff7fffL & l) != 0L)
                     jjCheckNAddTwoStates(88, 73);
                  break;
               case 88:
                  jjCheckNAddTwoStates(88, 73);
                  break;
               case 89:
                  if ((0xfffffff7fffffff7L & l) != 0L)
                     jjCheckNAddTwoStates(90, 73);
                  break;
               case 90:
                  jjCheckNAddTwoStates(90, 73);
                  break;
               case 94:
                  jjAddStates(181, 182);
                  break;
               case 97:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 98:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(183, 186);
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 104:
                  jjAddStates(187, 188);
                  break;
               case 107:
                  jjCheckNAddTwoStates(107, 108);
                  break;
               case 111:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(189, 190);
                  break;
               case 112:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(128, 130);
                  break;
               case 113:
                  if ((0xffffffdfffffffdfL & l) != 0L)
                     jjCheckNAddTwoStates(114, 108);
                  break;
               case 114:
                  jjCheckNAddTwoStates(114, 108);
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(191, 193);
                  break;
               case 116:
               case 117:
                  jjCheckNAddTwoStates(117, 108);
                  break;
               case 120:
                  if ((0xfffbfffffffbffffL & l) != 0L)
                     jjCheckNAddTwoStates(121, 108);
                  break;
               case 121:
                  jjCheckNAddTwoStates(121, 108);
                  break;
               case 122:
                  if ((0xfffefffffffeffffL & l) != 0L)
                     jjCheckNAddTwoStates(123, 108);
                  break;
               case 123:
                  jjCheckNAddTwoStates(123, 108);
                  break;
               case 127:
                  jjAddStates(194, 195);
                  break;
               case 130:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 131:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(0, 3);
                  break;
               case 133:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 134:
                  if (curChar == 64)
                     jjCheckNAdd(135);
                  break;
               case 135:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 137:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(138, 140);
                  break;
               case 138:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(139, 138);
                  break;
               case 141:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(141, 142);
                  break;
               case 143:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(141, 142);
                  break;
               case 149:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(159, 160);
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(5, 1);
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(161, 162);
                  break;
               case 14:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(40, 45);
                  break;
               case 18:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(196, 197);
                  break;
               case 21:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 14)
                     kind = 14;
                  break;
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(163, 164);
                  break;
               case 44:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(198, 199);
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(169, 170);
                  break;
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 54:
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(55, 51);
                  break;
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(171, 172);
                  break;
               case 66:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(200, 201);
                  break;
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(177, 178);
                  break;
               case 72:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 79:
               case 80:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 73);
                  break;
               case 81:
               case 82:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(82, 73);
                  break;
               case 87:
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(88, 73);
                  break;
               case 89:
               case 90:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(90, 73);
                  break;
               case 94:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(181, 182);
                  break;
               case 101:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(202, 203);
                  break;
               case 104:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(187, 188);
                  break;
               case 107:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(107, 108);
                  break;
               case 113:
               case 114:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(114, 108);
                  break;
               case 116:
               case 117:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(117, 108);
                  break;
               case 120:
               case 121:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(121, 108);
                  break;
               case 122:
               case 123:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(123, 108);
                  break;
               case 127:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(194, 195);
                  break;
               case 132:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(0, 3);
                  break;
               case 133:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 135:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(147, 148);
                  break;
               case 137:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(138, 140);
                  break;
               case 138:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(139, 138);
                  break;
               case 141:
               case 143:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(141, 142);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 155 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   133, 134, 141, 142, 145, 147, 148, 149, 146, 150, 151, 152, 153, 154, 43, 99, 
   131, 1, 8, 14, 16, 17, 2, 11, 5, 1, 6, 8, 9, 5, 1, 6, 
   7, 8, 10, 9, 6, 7, 8, 10, 5, 1, 6, 8, 15, 14, 5, 1, 
   6, 7, 8, 10, 9, 15, 5, 1, 6, 7, 8, 10, 9, 15, 14, 16, 
   1, 6, 7, 8, 14, 16, 46, 61, 44, 45, 49, 59, 52, 54, 56, 52, 
   53, 54, 56, 57, 58, 44, 45, 60, 49, 59, 44, 45, 60, 49, 59, 64, 
   68, 93, 66, 67, 71, 91, 74, 78, 81, 86, 75, 76, 89, 84, 85, 66, 
   67, 92, 71, 91, 66, 67, 92, 71, 91, 96, 103, 126, 101, 102, 106, 124, 
   109, 113, 115, 110, 111, 122, 118, 119, 101, 102, 125, 106, 124, 101, 102, 125, 
   106, 124, 129, 135, 136, 145, 147, 148, 149, 146, 150, 38, 41, 33, 36, 3, 
   4, 12, 13, 24, 25, 44, 45, 49, 64, 47, 48, 62, 63, 66, 67, 71, 
   96, 69, 70, 77, 87, 94, 95, 101, 102, 106, 129, 104, 105, 112, 120, 116, 
   118, 119, 127, 128, 20, 21, 44, 45, 66, 67, 101, 102, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec13[i2] & l2) != 0L);
      default : 
         if ((jjbitVec9[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xff8e1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[155];
private final int[] jjstateSet = new int[310];
protected char curChar;
/** Constructor. */
public HtmlTokenParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public HtmlTokenParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 155; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
